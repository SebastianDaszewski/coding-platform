generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
    id            String    @id @default(cuid()) @map("_id")
  nickname String @unique
  firstName String
  lastName  String
  email     String @unique
  password  String
  image         String?
  emailVerified DateTime?
  acceptTerms   Boolean?
  eneabled      Boolean?
  accounts      Account[]
  sessions      Session[]
  solutions JavascriptAssignmentSolution[]


  @@map("users")
}
enum Category {
FUNCTION
LOOP
}
enum DifficultyLevel {
EASY
MEDIUM
HARD
}



model JavascriptAssignment {
id String @id @default(cuid())
name String
category Category @default(FUNCTION)
difficultyLevel DifficultyLevel @default(EASY)
submissions Int? @default(0)
descriptionStart String
descriptionEnd String?
sampleInput String[]
sampleOutput String[]
tests Json[]
patternFunction String
solutions JavascriptAssignmentSolution[]
}
model JavascriptAssignmentSolution {
id String @id @default(cuid())
javascriptAssignment JavascriptAssignment @relation(fields: [javascriptAssignmentId], references: [id])
javascriptAssignmentId String
solution Json[] @default([])
user User @relation(fields: [userId], references: [id])
userId String
isCompleted Boolean @default(false)
@@unique([javascriptAssignmentId, userId])
}